#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__) + '/../lib' if $0 == __FILE__
require 'optparse'
require 'csv2avro'

options = {}

option_parser = OptionParser.new do |opts|
  opts.banner = "Version #{CSV2Avro::VERSION} of CSV2Avro\n" \
    "Usage: #{File.basename(__FILE__)} [options] [file]"

  opts.on('-s', '--schema SCHEMA', 'A file containing the Avro schema. This value is required.') do |path|
    options[:schema] = path
  end

  opts.on('-b', '--bad-rows [BAD_ROWS]', 'The output location of the bad rows report file.') do |path|
    options[:bad_rows] = path
  end

  opts.on('-d', '--delimiter [DELIMITER]', 'Field delimiter. If none specified, then comma is used as the delimiter.') do |char|
    options[:delimiter] = char.gsub("\\t", "\t")
  end

  opts.on('-a', '--array-delimiter [ARRAY_DELIMITER]', 'Array field delimiter. If none specified, then comma is used as the delimiter.') do |char|
    options[:array_delimiter] = char
  end

  opts.on('-D', '--write-defaults', 'Write default values.') do
    options[:write_defaults] = true
  end

  opts.on('-c', '--stdout', 'Output will go to the standard output stream, leaving files intact.') do
    options[:stdout] = true
  end

  opts.on('-h', '--help', 'Prints help') do
    $stderr.puts opts
    exit
  end
end

option_parser.parse!

begin
  raise OptionParser::MissingArgument.new('--schema') if options[:schema].nil?
  raise OptionParser::MissingArgument.new('--bad-rows') if options[:bad_rows].nil? && ARGV.empty?

  CSV2Avro.new(options).convert
rescue OptionParser::MissingArgument => ex
  $stderr.puts ex.message
  $stderr.puts option_parser
  exit 2
rescue Exception => e
  $stderr.puts 'Uh oh, something went wrong!'
  $stderr.puts e.message
  $stderr.puts e.backtrace.join("\n")
  exit 1
end
